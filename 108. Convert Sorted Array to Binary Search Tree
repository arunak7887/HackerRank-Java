Given an integer array nums where the elements are sorted in ascending order, convert it to a 
height-balanced
 binary search tree.

 

Example 1:
         0
     /       \
 -3            9
 /              /
-10             5


Input: nums = [-10,-3,0,5,9]
Output: [0,-3,9,-10,null,5]
Explanation: [0,-10,5,null,-3,null,9] is also accepted:

Example 2:
   3     1
  /       \
 1         3


Input: nums = [1,3]
Output: [3,1]
Explanation: [1,null,3] and [3,1] are both height-balanced BSTs.
 

Constraints:

1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums is sorted in a strictly increasing order.


Solution:


class Solution {
    public TreeNode sortedArrayToBST(int[] arr) {
        if(arr.length==0)return null;
        return bst(arr,0,arr.length-1);
    }

    public TreeNode bst(int arr[], int i, int j){
        if(i>j)return null;

        int mid = i+(j-i)/2;
        TreeNode node = new TreeNode(arr[mid]);
        node.left = bst(arr, i, mid-1);
        node.right = bst(arr, mid+1, j);
        return node;
    }
}
